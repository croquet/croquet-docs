Copyright Â© 2020 Croquet Studios

Because Croquet uses events as its main communication mechanism and enforces a strict separation between model and view, it is a natural fit for reactive view frameworks such as React.

The `@croquet/react` package provides a simple toolset for using Croquet together with React. The main principle of `@croquet/react` is that React components fully assume the role of the View side of Croquet. (Behind the scenes, normal Croquet Views are still created to act as slim contact points between the Croquet Model and the React components, but all view logic is implemented in the React components.)

React components interact with Croquet and the models in a session using **hooks** for accessing model state, subscribing to model events or publishing events among models and other views. These tutorials assume that you are familiar with the "functional-component + hooks" style of writing React apps. If you aren't, [the official React tutorial on hooks](https://reactjs.org/docs/hooks-intro.html) is a good starting point.

Furthermore, React provides a hook to declaratively listen to property changes on observable models (see `@croquet/observable`), automatically rerendering the subscribed React components. This makes the probably most common case of model-view interaction extremely straightforward and clear to read.

Taken together, `@croquet/react`'s helper hooks really make Croquet feel like just another state handling library for React that integrates as naturally as Redux or MobX, **but with the state magically being replicated among participants.**

The required boilerplate and hooks are pretty simple and the [documentation](./croquet-react.html#@croquet/react-Globals) contains minimal usage examples, so you can directly head there for quick reference. Alternatively you can follow the demo app tutorials which showcase successively more complex apps on top of `@croquet/react`.
